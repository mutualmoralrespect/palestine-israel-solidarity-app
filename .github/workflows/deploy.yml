name: Diagnostic S3 Deployment

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  diagnostic-build:
    name: Diagnostic Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ./palestine-solidarity-app
        run: |
          echo "Installing dependencies..."
          pnpm install --no-frozen-lockfile
          echo "Dependencies installed"
        
      - name: Check Vite config
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Checking Vite Configuration ==="
          if [ -f "vite.config.js" ]; then
            echo "‚úÖ vite.config.js found"
            cat vite.config.js
          else
            echo "‚ùå vite.config.js not found"
          fi
          
      - name: Check package.json scripts
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Package.json Scripts ==="
          cat package.json | grep -A 10 '"scripts"'
          
      - name: Clean and build
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Cleaning previous build ==="
          rm -rf dist/
          echo "=== Building application ==="
          pnpm run build
          echo "=== Build completed ==="
        
      - name: Detailed build analysis
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Build Output Analysis ==="
          if [ -d "dist" ]; then
            echo "‚úÖ dist directory exists"
            echo "--- Directory structure ---"
            find dist -type f -exec ls -la {} \;
            echo "--- File contents check ---"
            if [ -f "dist/index.html" ]; then
              echo "‚úÖ index.html exists"
              echo "--- index.html content (first 50 lines) ---"
              head -50 dist/index.html
            else
              echo "‚ùå index.html missing"
            fi
            if [ -d "dist/assets" ]; then
              echo "‚úÖ assets directory exists"
              echo "--- Assets directory contents ---"
              ls -la dist/assets/
            else
              echo "‚ùå assets directory missing"
            fi
          else
            echo "‚ùå dist directory does not exist"
            exit 1
          fi
          
      - name: Test local build
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Testing if build is a proper React app ==="
          # Check if index.html contains React app structure
          if grep -q "id=\"root\"" dist/index.html; then
            echo "‚úÖ React root div found"
          else
            echo "‚ùå React root div not found"
          fi
          
          # Check for JavaScript modules
          if ls dist/assets/*.js 1> /dev/null 2>&1; then
            echo "‚úÖ JavaScript files found in assets"
            ls -la dist/assets/*.js
          else
            echo "‚ùå No JavaScript files found in assets"
          fi
          
          # Check for CSS files
          if ls dist/assets/*.css 1> /dev/null 2>&1; then
            echo "‚úÖ CSS files found in assets"
            ls -la dist/assets/*.css
          else
            echo "‚ùå No CSS files found in assets"
          fi

  deploy-with-correct-url:
    name: Deploy with Correct S3 Website URL
    needs: diagnostic-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.website-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install and build
        working-directory: ./palestine-solidarity-app
        run: |
          pnpm install --no-frozen-lockfile
          rm -rf dist/
          pnpm run build
          
      - name: Final verification before deploy
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Final Build Verification ==="
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ] || [ ! -d "dist/assets" ]; then
            echo "‚ùå Build verification failed"
            exit 1
          fi
          echo "‚úÖ Build verification passed"
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3 with correct configuration
        id: deploy
        working-directory: ./palestine-solidarity-app
        run: |
          echo "=== Deploying to S3 ==="
          aws s3 sync ./dist s3://${{ secrets.PROD_S3_BUCKET_NAME }} --delete --cache-control "max-age=31536000"
          
          echo "=== Configuring S3 website ==="
          aws s3 website s3://${{ secrets.PROD_S3_BUCKET_NAME }} --index-document index.html --error-document index.html
          
          echo "=== Setting correct website URL ==="
          WEBSITE_URL="https://${{ secrets.PROD_S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com"
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Deployment completed!"
          echo "üìç Website URL: $WEBSITE_URL"
          
      - name: Verify deployment
        run: |
          echo "=== Verifying S3 deployment ==="
          aws s3 ls s3://${{ secrets.PROD_S3_BUCKET_NAME }}/ --recursive
          echo "=== Checking website configuration ==="
          aws s3api get-bucket-website --bucket ${{ secrets.PROD_S3_BUCKET_NAME }}

