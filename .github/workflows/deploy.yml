name: Test and Deploy React App

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        working-directory: ./palestine-solidarity-app
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install --no-frozen-lockfile
          fi
        
      - name: Run ESLint (allow warnings)
        working-directory: ./palestine-solidarity-app
        run: pnpm run lint --max-warnings=50
        continue-on-error: true
        
      - name: Build application
        working-directory: ./palestine-solidarity-app
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: ./palestine-solidarity-app/dist
          retention-days: 1

  deploy-dev:
    name: Deploy to Development S3
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    environment:
      name: development
      url: ${{ steps.deploy.outputs.website-url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: ./dist
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3 Development Bucket
        id: deploy
        run: |
          aws s3 sync ./dist s3://${{ secrets.DEV_S3_BUCKET_NAME }} --delete --cache-control "max-age=86400"
          echo "website-url=https://${{ secrets.DEV_S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
          
      - name: Invalidate CloudFront Distribution (if configured)
        if: ${{ vars.DEV_CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.DEV_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-prod:
    name: Deploy to Production S3
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.website-url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: ./dist
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3 Production Bucket
        id: deploy
        run: |
          aws s3 sync ./dist s3://${{ secrets.PROD_S3_BUCKET_NAME }} --delete --cache-control "max-age=31536000"
          echo "website-url=https://${{ secrets.PROD_S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
          
      - name: Invalidate CloudFront Distribution (if configured)
        if: ${{ vars.PROD_CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.PROD_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          
      - name: Notify deployment success
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "Website URL: ${{ steps.deploy.outputs.website-url }}"

