name: Deploy React App (Manus Build Process)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-with-manus:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Manus CLI
        run: |
          echo "=== INSTALLING MANUS CLI ==="
          npm install -g @manus/cli
          echo "Manus CLI version: $(manus --version)"

      - name: Create fresh project with manus-create-react-app
        run: |
          echo "=== CREATING FRESH PROJECT WITH MANUS ==="
          # Create the project using Manus template
          manus-create-react-app fresh-palestine-app
          
          echo "=== VERIFYING MANUS PROJECT STRUCTURE ==="
          ls -la fresh-palestine-app/
          
          echo "=== CHECKING MANUS PROJECT DEPENDENCIES ==="
          cd fresh-palestine-app
          cat package.json

      - name: Copy source files from existing project
        run: |
          echo "=== COPYING SOURCE FILES ==="
          
          # Copy source files from the existing palestine-solidarity-app
          echo "Copying src/ directory..."
          cp -r palestine-solidarity-app/src/* fresh-palestine-app/src/ || echo "No src files to copy"
          
          echo "Copying public/ directory..."
          cp -r palestine-solidarity-app/public/* fresh-palestine-app/public/ || echo "No public files to copy"
          
          echo "Copying configuration files..."
          cp palestine-solidarity-app/package.json fresh-palestine-app/package-original.json || echo "No package.json to backup"
          
          # Copy specific config files if they exist
          for file in vite.config.js tailwind.config.js postcss.config.js eslint.config.js; do
            if [ -f "palestine-solidarity-app/$file" ]; then
              echo "Copying $file..."
              cp "palestine-solidarity-app/$file" "fresh-palestine-app/$file"
            fi
          done
          
          echo "=== VERIFYING COPIED FILES ==="
          cd fresh-palestine-app
          ls -la src/
          ls -la public/

      - name: Install dependencies and build with Manus process
        working-directory: ./fresh-palestine-app
        run: |
          echo "=== MANUS-STYLE DEPENDENCY INSTALLATION ==="
          
          # Use npm as Manus does, not pnpm
          npm install
          
          echo "=== DEPENDENCY VERIFICATION ==="
          npm list --depth=0
          
          echo "=== MANUS-STYLE BUILD PROCESS ==="
          echo "Building with npm run build (Manus style)..."
          npm run build
          
          echo "=== BUILD VERIFICATION ==="
          ls -la dist/ || ls -la build/
          
          # Check both possible build directories
          BUILD_DIR=""
          if [ -d "dist" ]; then
            BUILD_DIR="dist"
          elif [ -d "build" ]; then
            BUILD_DIR="build"
          else
            echo "‚ùå No build directory found!"
            exit 1
          fi
          
          echo "Build directory: $BUILD_DIR"
          echo "Asset sizes:"
          ls -lh $BUILD_DIR/assets/ || ls -lh $BUILD_DIR/static/ || echo "No assets directory"
          
          echo "=== CONTENT VERIFICATION ==="
          if [ -f "$BUILD_DIR/index.html" ]; then
            content_size=$(wc -c < $BUILD_DIR/index.html)
            echo "index.html size: $content_size characters"
            
            # Check for rich content indicators
            if grep -q "Netanyahu\|Sinwar\|MMR Analysis\|Launch Now" $BUILD_DIR/index.html; then
              echo "‚úÖ Rich content detected!"
            else
              echo "‚ö†Ô∏è  Basic content only"
            fi
            
            # Check content size expectation
            if [ "$content_size" -gt 10000 ]; then
              echo "‚úÖ Content size looks good ($content_size characters)"
            else
              echo "‚ö†Ô∏è  Content size smaller than expected ($content_size characters)"
            fi
          else
            echo "‚ùå index.html not found!"
            exit 1
          fi
          
          echo "=== BUNDLE ANALYSIS ==="
          find $BUILD_DIR -name "*.js" -exec echo "JS Bundle: {}" \; -exec wc -c {} \; || echo "No JS bundles found"
          find $BUILD_DIR -name "*.css" -exec echo "CSS Bundle: {}" \; -exec wc -c {} \; || echo "No CSS bundles found"

      - name: Prepare build artifacts
        run: |
          echo "=== PREPARING BUILD ARTIFACTS ==="
          
          # Determine build directory
          if [ -d "fresh-palestine-app/dist" ]; then
            BUILD_DIR="fresh-palestine-app/dist"
          elif [ -d "fresh-palestine-app/build" ]; then
            BUILD_DIR="fresh-palestine-app/build"
          else
            echo "‚ùå No build directory found!"
            exit 1
          fi
          
          # Copy to standard location for deployment
          mkdir -p deployment-ready
          cp -r $BUILD_DIR/* deployment-ready/
          
          echo "=== DEPLOYMENT READY VERIFICATION ==="
          ls -la deployment-ready/
          echo "Total deployment size: $(du -sh deployment-ready/)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: manus-build-${{ github.sha }}
          path: deployment-ready/
          retention-days: 30

  deploy-dev:
    needs: build-with-manus
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: manus-build-${{ github.sha }}
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Development S3
        run: |
          echo "=== DEPLOYING MANUS BUILD TO DEVELOPMENT S3 ==="
          
          # Check if bucket name is set
          if [ -z "${{ secrets.DEV_S3_BUCKET }}" ]; then
            echo "‚ùå ERROR: DEV_S3_BUCKET secret is not set!"
            exit 1
          fi
          
          # Verify Manus build artifacts
          echo "Manus build verification:"
          ls -la dist/
          echo "Content size: $(find dist -type f -exec wc -c {} + | tail -1)"
          
          # Deploy to S3
          echo "Deploying Manus build to bucket: ${{ secrets.DEV_S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ secrets.DEV_S3_BUCKET }}/ --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Deploy HTML files with no cache
          aws s3 sync dist/ s3://${{ secrets.DEV_S3_BUCKET }}/ \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json"
          
          # Configure S3 website hosting
          aws s3 website s3://${{ secrets.DEV_S3_BUCKET }} \
            --index-document index.html \
            --error-document index.html
          
          echo "‚úÖ Manus-style development deployment complete"
          echo "üåê Dev URL: https://${{ secrets.DEV_S3_BUCKET }}.s3-website-us-east-1.amazonaws.com"

      - name: Invalidate CloudFront (Dev)
        if: vars.DEV_CLOUDFRONT_DISTRIBUTION_ID
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.DEV_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  deploy-prod:
    needs: build-with-manus
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: manus-build-${{ github.sha }}
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Production S3
        run: |
          echo "=== DEPLOYING MANUS BUILD TO PRODUCTION S3 ==="
          
          # Check if bucket name is set
          if [ -z "${{ secrets.PROD_S3_BUCKET }}" ]; then
            echo "‚ùå ERROR: PROD_S3_BUCKET secret is not set!"
            exit 1
          fi
          
          # Verify Manus build artifacts
          echo "Manus build verification:"
          ls -la dist/
          echo "Content size: $(find dist -type f -exec wc -c {} + | tail -1)"
          
          # Verify rich content before deployment
          if [ -f "dist/index.html" ]; then
            content_size=$(wc -c < dist/index.html)
            echo "Content size: $content_size characters"
            
            if [ "$content_size" -gt 10000 ]; then
              echo "‚úÖ Manus build content size looks good ($content_size characters)"
            else
              echo "‚ö†Ô∏è  WARNING: Content size ($content_size) smaller than expected"
            fi
          fi
          
          # Deploy to S3
          echo "Deploying Manus build to bucket: ${{ secrets.PROD_S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ secrets.PROD_S3_BUCKET }}/ --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Deploy HTML files with no cache
          aws s3 sync dist/ s3://${{ secrets.PROD_S3_BUCKET }}/ \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json"
          
          # Configure S3 website hosting
          aws s3 website s3://${{ secrets.PROD_S3_BUCKET }} \
            --index-document index.html \
            --error-document index.html
          
          echo "‚úÖ Manus-style production deployment complete"
          echo "üåê Prod URL: https://${{ secrets.PROD_S3_BUCKET }}.s3-website-us-east-1.amazonaws.com"